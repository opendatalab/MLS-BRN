# model settings
model = dict(
    type="LOFT",
    backbone=dict(
        type="ResNet",
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type="BN", requires_grad=True),
        norm_eval=True,
        style="pytorch",
        init_cfg=dict(type="Pretrained", checkpoint="torchvision://resnet50"),
    ),
    neck=dict(type="FPN", in_channels=[256, 512, 1024, 2048], out_channels=256, num_outs=5),
    offset_angle_head=dict(
        type="OffsetAngleHead",
        gt_footprint_mask_as_condition=False,
        # gt_footprint_mask_as_condition=True,
        # gt_footprint_mask_repeat_num=32,
        num_convs=4,
        conv_out_channels=[256, 256, 256, 256],
        strides=[2, 2, 2, 2],
        kernel_size=3,
        num_fcs=2,
        fc_out_channels=[64, 16],
        in_size=256,
        in_channels=256,
        with_tanh=True,
        regular_lambda=0.1,
        loss_angle=dict(type="SmoothL1Loss", loss_weight=1.0),
        loss_method="loss",
    ),
    nadir_angle_head=dict(
        type="NadirAngleHead",
        gt_height_mask_as_condition=False,
        # gt_height_mask_as_condition=True,
        # gt_height_mask_repeat_num=32,
        num_convs=8,
        conv_out_channels=[512, 512, 512, 512, 1024, 1024, 2048, 2048],
        strides=[1, 2, 1, 2, 1, 2, 1, 2],
        kernel_size=3,
        num_fcs=5,
        fc_out_channels=[512, 256, 128, 64, 32],
        in_size=256,
        in_channels=256,
        reg_num=1,
        loss_angle=dict(type="SmoothL1Loss", loss_weight=4 * 2.0),
    ),
    # loss_offset_angle_consistency=dict(
    #     type="SmoothL1Loss",
    #     loss_weight=0.05,
    #     regular_lambda=(0.01, 100.0),
    # ),
    rpn_head=dict(
        type="RPNHead",
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type="AnchorGenerator",
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64],
        ),
        bbox_coder=dict(
            type="DeltaXYWHBBoxCoder",
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0],
        ),
        loss_cls=dict(type="CrossEntropyLoss", use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(type="L1Loss", loss_weight=1.0),
    ),
    roi_head=dict(
        type="LoftHFMRoIHead",
        bbox_roi_extractor=dict(
            type="SingleRoIExtractor",
            roi_layer=dict(type="RoIAlign", output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32],
        ),
        bbox_head=dict(
            type="Shared2FCBBoxHead",
            in_channels=256,
            fc_out_channels=1024,
            roi_feat_size=7,
            num_classes=1,
            bbox_coder=dict(
                type="DeltaXYWHBBoxCoder",
                target_means=[0.0, 0.0, 0.0, 0.0],
                target_stds=[0.1, 0.1, 0.2, 0.2],
            ),
            reg_class_agnostic=False,
            loss_cls=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=1.0),
            loss_bbox=dict(type="L1Loss", loss_weight=1.0),
        ),
        mask_roi_extractor=dict(
            type="SingleRoIExtractor",
            roi_layer=dict(type="RoIAlign", output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32],
        ),
        mask_head=dict(
            type="FCNMaskHead",
            num_convs=4,
            roi_feat_size=14,
            in_channels=256,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(type="CrossEntropyLoss", use_mask=True, loss_weight=1.0),
        ),
        offset_roi_extractor=dict(
            type="SingleRoIExtractor",
            roi_layer=dict(type="RoIAlign", output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32],
        ),
        offset_head=dict(
            type="OffsetHeadExpandFeature",
            expand_feature_num=4,
            share_expand_fc=True,
            rotations=[0, 90, 180, 270],
            num_fcs=2,
            fc_out_channels=1024,
            num_convs=10,
            loss_offset=dict(type="SmoothL1Loss", loss_weight=8 * 2.0),
        ),
        footprint_mask_from_roof_offset_head=dict(
            type="FootprintMaskFromRoofOffsetHead",
            num_convs=8,
            roi_feat_size=28,
            upsample_cfg=dict(type="deconv", scale_factor=1),
            in_channels=3,
            conv_out_channels=256,
            num_classes=1,
            loss_mask=dict(type="CrossEntropyLoss", use_mask=True, loss_weight=1.0),
        ),
        height_roi_extractor=dict(
            type="SingleRoIExtractor",
            roi_layer=dict(type="RoIAlign", output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32],
        ),
        height_head=dict(
            type="HeightHead",
            num_fcs=2,
            fc_out_channels=1024,
            num_convs=10,
            loss_height=dict(type="SmoothL1Loss", loss_weight=16 * 2.0),
        ),
    ),
)
train_cfg = dict(
    rpn=dict(
        assigner=dict(
            type="MaxIoUAssigner",
            pos_iou_thr=0.7,
            neg_iou_thr=0.3,
            min_pos_iou=0.3,
            match_low_quality=True,
            ignore_iof_thr=-1,
            gpu_assign_thr=512,
        ),
        sampler=dict(
            type="RandomSampler",
            num=512,
            pos_fraction=0.5,
            neg_pos_ub=-1,
            add_gt_as_proposals=False,
        ),
        allowed_border=-1,
        pos_weight=-1,
        debug=False,
    ),
    rpn_proposal=dict(
        nms_pre=3000,
        max_per_img=3000,
        nms=dict(type="nms", iou_threshold=0.7),
        min_bbox_size=0,
        nms_across_levels=False,
        nms_post=3000,
    ),
    rcnn=dict(
        assigner=dict(
            type="MaxIoUAssigner",
            pos_iou_thr=0.5,
            neg_iou_thr=0.5,
            min_pos_iou=0.5,
            match_low_quality=True,
            ignore_iof_thr=-1,
            gpu_assign_thr=512,
        ),
        sampler=dict(
            type="RandomSampler",
            num=1024,
            pos_fraction=0.25,
            neg_pos_ub=-1,
            add_gt_as_proposals=True,
        ),
        mask_size=28,
        pos_weight=-1,
        debug=False,
    ),
    # pseudo_rpn_bboxes_wh_ratio=[1.5, 3],
    # pseudo_rpn_bboxes_wh_ratio=[1.5, 2],
    pseudo_rpn_bboxes_wh_ratio=[1.2, 2],
    offset_scale=1.0,
    pseudo_rpn_bbox_scale=1.0,
    resolution=0.6,
    shrunk_losses={
        # "rpn_cls",
        # "rpn_bbox",
        "bbox",
        "cls",
        "mask",
        "offset",
    },
    shrunk_factor=0.0,
    # use_pred_for_offset_angle_consistency=True,
    use_pred_for_offset_angle_consistency=False,
    footprint_mask_fro_loss_lambda=1,
)
test_cfg = dict(
    rpn=dict(
        nms_pre=3000,
        max_per_img=3000,
        nms=dict(type="nms", iou_threshold=0.7),
        min_bbox_size=0,
        nms_across_levels=False,
        nms_post=3000,
    ),
    rcnn=dict(
        score_thr=0.05,
        nms=dict(type="soft_nms", iou_threshold=0.5),
        max_per_img=2000,
        mask_thr_binary=0.5,
    ),
)
